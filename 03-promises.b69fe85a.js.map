{"mappings":"qhBAqDA,IAAAA,EAAAC,EAAA,SAmCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,E,MAAUC,IAEpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CA1CAQ,SAASC,cAAc,SAE/BC,iBAAiB,UAEtB,SAAuBC,GACrBA,EAAEC,iBAEF,MAAMC,EAAYC,OAAOH,EAAEI,cAAcf,MAAMgB,OACzCC,EAAWH,OAAOH,EAAEI,cAAcG,KAAKF,OACvCG,EAAaL,OAAOH,EAAEI,cAAcK,OAAOJ,OAEjD,GAAIH,EAAY,GAAKI,EAAW,EAC9BI,EAAAzB,GAAS0B,OAAOC,QAAQ,iDACnB,GAAIJ,GAAc,EACvBE,EAAAzB,GAAS0B,OAAOC,QAAQ,iCAExB,IAAK,IAAIC,EAAI,EAAGA,GAAKL,EAAYK,GAAK,EAAG,CAEvC1B,EAAc0B,EADCX,EAAYI,GAAYO,EAAI,IAExCC,MAAK,EAAC1B,SAAEA,EAAQC,MAAEA,MACjBqB,EAAAzB,GAAS0B,OAAOI,QACd,uBAAqB3B,QAAiBC,MAAU,IAGnD2B,OAAM,EAAC5B,SAAEA,EAAQC,MAAEA,MAClBqB,EAAAzB,GAAS0B,OAAOM,QACd,sBAAoB7B,QAAeC,MAAU,G,KAoBzDqB,EAAAzB,GAAS0B,OAAOO,KAAK,CACnBC,MAAO,QACP/B,SAAU,aACVgC,SAAU,QACVC,SAAU","sources":["src/js/03-promises.js"],"sourcesContent":["// Завдання 3 - генератор промісів\n// Виконуй це завдання у файлах 03-promises.html і 03-promises.js. Подивися демо-відео роботи генератора промісів.\n// https://user-images.githubusercontent.com/17479434/127932183-42232f26-4db2-4614-86bc-6bec54b1d6a4.mp4\n// HTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах, крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n/*\n<form class=\"form\">\n  <label>\n    First delay (ms)\n    <input type=\"number\" name=\"delay\" required />\n  </label>\n  <label>\n    Delay step (ms)\n    <input type=\"number\" name=\"step\" required />\n  </label>\n  <label>\n    Amount\n    <input type=\"number\" name=\"amount\" required />\n  </label>\n  <button type=\"submit\">Create promises</button>\n</form>\n*/\n\n// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount. Під час кожного виклику передай їй номер промісу (position), що створюється, і затримку, враховуючи першу затримку (delay), введену користувачем, і крок (step).\n\n/*\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  if (shouldResolve) {\n    // Fulfill\n  } else {\n    // Reject\n  }\n}\n*/\n\n// Доповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або відхиляється через delay часу. Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів. Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n\n/*\ncreatePromise(2, 1500)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n*/\n\n// Бібліотека повідомлень\n// Наступний функціонал не обов'язковий для здавання завдання, але буде хорошою додатковою практикою.\n// Для відображення повідомлень користувачеві, замість console.log(), використовуй бібліотеку notiflix (https://github.com/notiflix/Notiflix#readme).\n\n/*-------------------------------------------------------------*/\n\nimport Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', submitHandler);\n\nfunction submitHandler(e) {\n  e.preventDefault();\n\n  const delayInit = Number(e.currentTarget.delay.value);\n  const stepInit = Number(e.currentTarget.step.value);\n  const amountInit = Number(e.currentTarget.amount.value);\n\n  if (delayInit < 0 || stepInit < 0) {\n    Notiflix.Notify.warning(`Please enter a positive number of delays`);\n  } else if (amountInit <= 0) {\n    Notiflix.Notify.warning(`I can't promise anything`);\n  } else {\n    for (let i = 1; i <= amountInit; i += 1) {\n      let delaySum = delayInit + stepInit * (i - 1);\n      createPromise(i, delaySum)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        });\n    }\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nNotiflix.Notify.init({\n  width: '360px',\n  position: 'center-top',\n  distance: '100px',\n  fontSize: '28px',\n});\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","e","preventDefault","delayInit","Number","currentTarget","value","stepInit","step","amountInit","amount","$parcel$interopDefault","Notify","warning","i","then","success","catch","failure","init","width","distance","fontSize"],"version":3,"file":"03-promises.b69fe85a.js.map"}